require 'readline'
require 'pathname'
require 'fileutils'

# homebrew installation
if ENV['IS_MAC'] == '1'
  unless system 'which brew'
    puts 'Installing homebrew...'
    unless system 'ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"'
      raise 'Error installing homebrew.'
    end
    puts 'homebrew successfully installed!'
  else
    puts 'homebrew already installed.'
  end

  puts 'Tapping brew-bundle...'
  unless system 'brew tap Homebrew/bundle'
    raise 'Error tapping Homebrew/bundle.'
  end
  puts 'brew-bundle successfully installed!'
end

# Brewfile installation
puts 'Installing Brewfile bundle...'
unless system 'brew bundle'
  raise 'Error installing Brewfile bundle.'
end
puts 'Brewfile bundle successfully installed!'

# oh-my-zsh installation
ohmyzsh_path = Pathname.new "#{Dir.home}/.oh-my-zsh"
unless ohmyzsh_path.exist?
  puts 'Installing oh-my-zsh...'
  unless system 'curl -L http://install.ohmyz.sh | sh'
    raise 'Error installing oh-my-zsh'
  end
  puts 'oh-my-zsh installed!'
else
  puts 'oh-my-zsh already installed.'
end

# Install powerline-fonts
if ENV['IS_MAC'] == '1'
  FileUtils.cp Dir.glob("./vendor/powerline-fonts/SourceCodePro/*.otf"), "#{Dir.home}/Library/Fonts/"
end

# Private info prompts
email = Readline.readline('Email address: ')
unless system "git config --file ~/.gitconfig-private user.email #{email}"
  raise 'Error setting email address in git.'
end
puts 'Email address set in git global configuration'

# Local settings prompts
at_work = Readline.readline('Apply work configuration? ')

if at_work == 'y'
  puts 'Linking work configuration...'
  FileUtils.ln_sf "#{Dir.home}/.homesick/repos/dotfiles/work/.gitconfig", "#{Dir.home}/.gitconfig-local"
  FileUtils.rm "#{Dir.home}/.zsh-work"
  FileUtils.ln_sf "#{Dir.home}/.homesick/repos/dotfiles/work/.zsh", "#{Dir.home}/.zsh-work"
  puts 'Work configuration linked successfully.'

  puts 'Enter certificate password: '
  cert_password = STDIN.noecho(&:gets).chomp

  File.open "#{Dir.home}/.zshenv-work", "w" do | file |
    file.puts "CERT_PASSWORD=#{cert_password}"
  end
  puts "Certificate password written to environment."
end
